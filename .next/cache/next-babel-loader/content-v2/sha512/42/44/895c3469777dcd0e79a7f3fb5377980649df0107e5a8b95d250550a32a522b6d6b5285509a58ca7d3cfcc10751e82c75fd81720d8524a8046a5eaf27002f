{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/choi/Desktop/react-next-erp/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, put } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAIL } from '../reducers/user'; // call 동기, fork 비동기,\n\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('saga login', action); // const result = yield call(logInAPI, action.data);\n\n          _context.next = 4;\n          return delay(3000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            //data: result.data\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'LOG_IN_FAIL',\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // takeLatest 마지막 건만 실행한다. 여러번 클릭 시\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/choi/Desktop/react-next-erp/sagas/user.js"],"names":["logIn","watchLogin","userSaga","axios","all","fork","takeLatest","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAIL","logInAPI","post","data","action","console","log","delay","type","response"],"mappings":";;oDAWUA,K;qDAmBAC,U;qDAIeC,Q;;AAlCzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,WAAzC,QAA4D,kBAA5D,C,CAEA;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAOR,KAAK,CAACS,IAAN,CAAW,YAAX,EAAyBC,IAAzB,CAAP;AACD;;AAED,SAAUb,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAA1B,EAFJ,CAGI;;AAHJ;AAII,iBAAMG,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAKI,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAE,gBADE;AAEV;AACEL,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAHL,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMN,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAE,aADE;AAERL,YAAAA,IAAI,EAAE,YAAEM,QAAF,CAAWN;AAFT,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAkBA;;;AACA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAAC,gBAAD,EAAmBN,KAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CACRC,IAAI,CAACJ,UAAD,CADI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, takeLatest, put } from 'redux-saga/effects';\r\n\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAIL } from '../reducers/user';\r\n\r\n// call 동기, fork 비동기,\r\n\r\nfunction logInAPI() {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log('saga login', action);\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(3000);\r\n    yield put({\r\n      type: 'LOG_IN_SUCCESS',\r\n    //data: result.data\r\n      data: action.data\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: 'LOG_IN_FAIL',\r\n      data: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// takeLatest 마지막 건만 실행한다. 여러번 클릭 시\r\nfunction* watchLogin() {\r\n  yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin)\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}